@page "/existing-ranking/{existingRankingId}"
@using Confluent.Kafka
@using RankedChoiceVotingApp.Classes
@using System.Text.Json
@using System.Text
@using RankedChoiceVotingApp.Services
@inject IConfiguration configuration
@inject IApiService _apiService
@rendermode InteractiveServer


<PageTitle>Existing Ranking</PageTitle>

<h1>Existing Ranking</h1>

<p>
    RankingId: @existingRankingId
</p>

@if (_candidates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var candidate in _candidates)
            {
                <tr>
                    <td>@candidate</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string existingRankingId { get; set; } = string.Empty;

    private string? _newCandidate;
    private string? _rankingName;
    private string? _url;

    private List<string> _candidates = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var task = await _apiService.GetListOfCandidatesAsync(existingRankingId);

            _candidates = task.ToList();
        }
        catch (HttpRequestException e)
        {
            // Handle any errors
            Console.WriteLine($"Request error: {e.Message}");
        }


        await base.OnInitializedAsync();

        return;
    }

}
